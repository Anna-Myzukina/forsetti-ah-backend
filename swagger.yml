swagger: '2.0'
info:
    version: '1.0'
    title: Author's Haven.
    description: 'A Social platform for the creative at heart.'
schemes:
  - https
host: forsetti-ah-backend-staging.herokuapp.com
basePath: '/api/v1'
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
tags:
  - name: 'Authentication'
  - name: 'Users'
  - name: 'Articles'
  - name: 'Comments'

paths:
  /auth/signup:
    post:
      tags:
      - Authentication
      summary: "Register a new user on the application"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New user that needs to be created on the application"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "User registered successfully"
          example:
            status: 201
            message: "User registered successfully"
            data:
              - token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NmY4Y2Y4LWIwNzQtNDE1ZC04MDYxLWVjZDBkMzgzZjQ0NiIsImlhdCI6MTU1NDEwODc4MSwiZXhwIjoxNTU2NzAwNzgxfQ.e6K_0U36u3b16JFsAwcO1fJA0onVSKa1KRGQVFEhm3g"
                user:
                  firstname: "Zokky 2"
                  lastname: "Umeilechukwu"
                  email: "o.yes@gmail.com"
        503:
          description: "Some error occurred"
  /auth/signin:
    post:
      tags:
      - Authentication
      summary: "Sign in an existing user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "An existing user that returns to be signed in"
        required: true
        schema:
          $ref: "#/definitions/UserSignin"
      responses:
        201:
          description: "Signed in successfully"
          example:
            status: 201
            message: "Signed in successfully"
            data:
              - user:
                  email: "o.yes@gmail.com"
                  password: "password"
        400:
          description: "Sign in with invalid credentials"
          example:
            status: 400
            message: "Invalid Credentials"
            data:
              - token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NmY4Y2Y4LWIwNzQtNDE1ZC04MDYxLWVjZDBkMzgzZjQ0NiIsImlhdCI6MTU1NDEwODc4MSwiZXhwIjoxNTU2NzAwNzgxfQ.e6K_0U36u3b16JFsAwcO1fJA0onVSKa1KRGQVFEhm3g"
                user:
                  email: "o.yes@gmail.com"
                  password: "password"
        503:
          description: "Some error occurred. Please try again"

  /auth/forgotpassword:
    post:
      tags:
      - Authentication
      summary: "Send reset password email to user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Send email to user"
        required: true
        schema:
          $ref: "#/definitions/UserReset"
      responses:
        200:
          description: "Mail successfully sent"
          example:
            status: 200
            message: "Mail successfully sent"
        422:
          description: "Invalid email type"
          example:
            status: 422
            message: "Email value is invalid"
        503:
          description: "Some error occurred. Please try again"
  /auth/resetpassword:
    put:
      tags:
      - Authentication
      summary: "Reset user password"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "A user that wants to reset password"
        required: true
        schema:
          $ref: "#/definitions/Password"
      responses:
        200:
          description: "Password successfully reset"
          example:
            status: 200
            message: "Password changed successfully"
        422:
          description: "Invalid email type"
          example:
            status: 422
            message: "Password value is invalid"
        503:
          description: "Some error occurred. Please try again"
  /auth/facebook:
    get:
      description: 'This endpoint enables a user sign in with facebook'
      tags:
        - Authentication
      responses:
        200:
          description: 'Auto generated using Swagger Inspector'

  /auth/twitter:
    get:
      description: 'This endpoint enables a user sign in with twitter'
      tags:
        - Authentication
      responses:
        200:
          description: 'Auto generated using Swagger Inspector'

  /auth/google:
    get:
      description: 'This endpoint enables a user sign in with google'
      tags:
        - Authentication
      responses:
        200:
          description: 'Auto generated using Swagger Inspector'

  /users/role:
    patch:
      summary: Handles updating the role of a user
      description: This endpoint enables superadmins to pass admin rights to certain users
      tags:
        - Users
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          type: uuid
          description: Id of user.
      responses:
        200:
          description: User role has been updated successfully
          example:
            status: 200
            message: 'The user role has been changed to admin'
            data:
              id: b2b67e1e-d40c-47ef-8abf-62e1a330d4ef,
              firstname: Melanie,
              lastname: Dara,
              role: admin,
              updatedAt: 2019-04-03T13:16:56.044Z
        404:
          description: The user was not found in the database
          example:
            status: 404
            message: This user was not found.
        401:
          description: User could not be authenticated
          example:
            status: 401
            error: Access Denied. Please Log In.
        403:
          description: User does not have the permission to access this resource
          example:
            status: 403
            error: Access Denied. For Superadmins only.
        500:
          description: Internal server error
          example:
            status: 500
            error: Internal server error

  /users/profile:
    patch:
      summary: 'Handles updating users profile.'
      description: 'This endpoint enables a user to edit his profile details and add a display image.'
      tags:
        - Users
      consumes:
        - multipart/form-data
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: formData
          name: body
          required: false
          description: 'This is the request body containing the profile details.'
          schema:
            $ref: '#/definitions/UpdateProfile'
        - in: formData
          name: file
          type: file
          required: false
          description: 'This contains the image to be uploaded'
          schema:
            $ref: '#/definitions/UpdateProfile'
      responses:
        200:
          description: Profile has been updated successfully
          example:
            status: 200
            message: Profile updated successfully.
            data:
              id: b2b67e1e-d40c-47ef-8abf-62e1a330d4ef,
              firstname: Melanie,
              lastname: Dara,
              username: melanie,
              email: melanie@dara.com,
              roleId: a11f440b-eae3-4d28-990d-700c7b965709,
              social: null,
              image: https://res.cloudinary.com/bukkyooo/image/upload/v1554716315/forsetti/xaj1zajnhvzvyvyvhg4g.jpg,
              bio: null,
              createdAt: 2019-04-08T09:12:32.126Z,
              updatedAt": 2019-04-08T09:29:45.522Z
        401:
          description: User could not be authenticated
          example:
            status: 401
            error: Access Denied. Please Log In.
        500:
          description: Internal server error
          example:
            status: 500
            error: Internal server error

  /users/profile/:id:
    get:
      summary: Handles getting a users profile
      description: Gets the profile details of a user from the database
      tags:
        - Users
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          type: uuid
          description: Id of user.
      responses:
        200:
          description: User profile has been retrieved successfully
          example:
            status: 200
            message: User profile found.
            data:
              firstname: Melanie
              lastname: Dara
              username: melanie
              bio: I am an Author
              image: https://res.cloudinary.com/yourusername/image/upload/v1549801942/forsetti/tbucxtfvdrexspiw0mby.jpg
              following: 2
              followers: 0
              Articles: 1
        401:
          description: User could not be authenticated
          example:
            status: 401
            error: Access Denied. Please Log In.
        404:
          description: User with the given id was not found in the database
          example:
            status: 404
            error: No profile found for this user.
        500:
          description: Internal server error
          example:
            status: 500
            error: Internal server error

  /article:
  /:slug/comment:
    post:
      tags:
      - "Comments"
      summary: "User can make a comment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "comment made on an article"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        201:
          description: "user comment has been made successfully"
          example:
            status: 201
            message: "comment made successfully"
        422:
          description: "comment not sent"
          example:
            status: 422
            message: "comment is required"
        503:
          description: "Some error occurred. Please try again"
  /:slug/comment/:commentid/thread:
    post:
      tags:
      - "Comments"
      summary: "User can make a threaded comment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "comment made in a comment thread"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        201:
          description: "thread comment added"
          example:
            status: 201
            message: "thread comment added"
        422:
          description: "comment not sent"
          example:
            status: 422
            message: "comment is required"
        503:
          description: "Some error occurred. Please try again"
  /article:
    post:
      tags:
      - Articles
        summary: "User can create an article"
        description: "A new article to be created"
        required: true
        schema:
          $ref: "#/definitions/Articles"
      responses:
        201:
          description: "Article successfully created"
          example:
            status: 201
            message: "Article successfully created"
            data:
              - article:
                  title: 'What is love'
                  body: 'God is love'
                  tags: ['art', 'love']
                  description: 'It is real'
                  published: true
                  slug: 'what-is-love'
        400:
          description: "Article was not created successfully"
          example:
            status: 400
            message: "Article was not created successfully"
        503:
          description: "Some error occurred. Please try again"

definitions:
  User:
    type: "object"
    properties:
      firstname:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  UserSignin:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  UserReset:
    type: "object"
    properties:
      email:
        type: "string"
    xml:
      name: "User"
  Password:
    type: "object"
    properties:
      password:
        type: "string"
        example: 'password123'
    xml:
      name: "User"

  Article:
    type: "object"
    properties:
      title:
        type: "string"
      body:
        type: "string"
      description:
        type: "string"
      published:
        type: "boolean"
      tags:
        type: "array"
      slug:
        type: "string"
      userId:
        type: "string"
    xml:
      name: "Article"
  UpdateProfile:
    title: 'Update user profile.'
    type: object
    properties:
      firstname:
        description: 'The users firstname.'
        type: string
      lastname:
        description: 'The users lastname.'
        type: string
      username:
        description: 'The users username.'
        type: string
      bio:
        description: 'The users bio.'
        type: string
      image:
        description: 'The users display image.'
        type: file
    example:
      username: melanie002
      bio: This is my bio
  Comment:
    type: "object"
    properties:
      comment:
        type: "string"
